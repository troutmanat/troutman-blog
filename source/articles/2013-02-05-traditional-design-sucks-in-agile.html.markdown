--- 
title: "Traditional Design Sucks in an Agile Process"
description: "Design work in Agile. Agile development methods are set up beautifully to handle writing software, but design tasks always feel like the ugly duckling. Here's my approach to dealing with design work in an Agile process."
date: 2013-02-05 
published: true
tags: SDM, agile
--- 
*New here? I suggest checking out [The Best Parts of Agile](/articles/2013/01/10/best-parts-of-agile.html "The Best Parts of Agile") as a basic primer to this article.*

You've stood up a whiz-bang Agile process on your team and everyone is loving it. Work is more predictable and there are less distractions. The team happily comes in, estimates some work, and chugs through it over the course of a sprint. All is well, until you decide to take on a large new project. You realize that the team needs to spend some up-front cycles doing high-level design. Nothing drastic, just the shape of things, begin to define sub-systems, maybe start looking at API interfaces... So you go to the team and tell them we're going to have some design stories in the next sprint. 

It's like you pulled the fire alarm in a maternity ward. Panic sweeps across the land: How do we estimate design? When do we know we're done? Doesn't the whole team have to work on this? Who will save the children? etc... These are reasonable questions (even the children one, but it *does* seem out of context), because in so many cases design work doesn't happen like implementation. It's harder to give it a nice crisp success criteria, which is [an important part of doing Agile right](/articles/2013/01/10/best-parts-of-agile.html "The Best Parts of Agile"). It's also one of the few things which developers seem to want to do as a community undertaking. "Let's get in a room and talk it out" - They'll say, much to your surprise because some of these people haven't voluntarily spoken in months. You need a plan for how this is supposed to go. Here's some suggestions:

1. **Give design work to an individual first** - There is a lot of belief that group thinking right out of the gate will yield a more creative, diverse, and overall quality set of ideas. There is a natural inclination to do design work as a group to explore a variety of ideas, and arrive at the best one. Well, [turns out that's bullshit](http://www.newyorker.com/reporting/2012/01/30/120130fa_fact_lehrer "Groupthink"). Pick someone to do the first iteration of the design, and they'll usually come back with many of the dumbest ideas already weeded out. Now you've cut way back on the amount of [bikeshedding](http://en.wikipedia.org/wiki/Parkinson's_law_of_triviality) that will have to go on in a typical design session. Once the first pass is complete, set up time with the team for them to read it, and provide comments. Iterate. This is essentially the [RFC](http://en.wikipedia.org/wiki/Request_for_Comments) style of design, and it works quite well. 
2. **Time box the design** - Don't be afraid to put time constraints on the initial design. There is nothing wrong with being iterative on a design just like you would with anything else. Have the team estimate complexity as a proxy for size of the effort. Use the size as an indication of how much time (roughly) should be dedicated to the first rev of the document. You can have follow up design tasks for the areas where more clarity is desired. Sometimes you'll realize that there isn't much decision making to be had by diving deeper in an area, so cut the design short. Isn't that nice?
3. **The output of design work is more work** - A design task is successful when you've created a collection of work that has to be done because of the design. The work that you create from a design can be *even more design* (it's turtles all the way down) if that's what's needed. It's OK, you're making progress if the nature of the design tasks are changing with every iteration. Typically, you'll end up with a combination of implementation and design, which is great for creating parallel effort.
4. **You don't have to make the next design piece the highest priority** - You're not doing [Waterfall](http://en.wikipedia.org/wiki/Waterfall_model) anymore, so resist the temptation to keep following the chain of design work. It's OK to not have all the answers before you start writing code. In truth, you're likely to come back to those later design tasks with better ideas if you've spend some time implementing. In many cases the design will happen organically, and everyone will decide that the earlier design task isn't needed anymore. Don't panic if this happens, it means the team is learning from the earlier work they're doing. That's a good thing. 

The above is a basic framework for getting design done in an Agile world, your mileage may vary. The key takeaway is that design work isn't by its nature different from any other work you need to do as a team. It can be broken up, you can have individuals or small groups tackle it, and you can decide how much time you want to spend on it. Don't do it all at once, that's probably a mistake. Don't be afraid to challenge conventions around how your team designs new systems, you could end up with a better process for everyone. 
