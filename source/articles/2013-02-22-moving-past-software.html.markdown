--- 
title: "Moving Past Writing Software"
description: "I frequently get asked by developers considering a switch to management: do you miss coding? No, I don't. Here's why."
date: 2013-02-22 
popular: true
published: true
tags: management, process
---
I'm going to tell you a long story about how I came to a point in my life where I wasn't writing software anymore, and why that's OK with me. But I can't start there, I'll have to start quite a bit earlier for it all to make sense. 

## Wrecking Cannonballs
I've always had a curiosity about how things work. As a small child, the only real option I had for figuring it out was to take something apart.  Deconstruct, and then seeing the pieces covering the floor, fully re-form the mechanism in my mind. I once unscrewed my grandfather's vice until it fell apart, being interested in the mechanism that made the jaws move and wondering how far it could open. Was it designed to stop at some point? Turns out no, it would let you unscrew the jaws till they fell out of their tracks. In a moment of frustration, my grandfather turned to me: "God damn it! You could wreck a cannonball. Why did you do that?". It seemed like a silly question to me. 

Taking things apart worked pretty well for me for a long time. With physical objects, you can get a good sense of how things happen just by removing the cover. Then I took apart a broken Nintendo controller, and was disappointed to find practically nothing. A few small plastic buttons, and a slim green circuit board with reflective sliver solder was hardly enough information to really understand how it worked. Suddenly taking things apart wasn't going to be enough. If I truly wanted to understand how they worked I would need to understand how to build them as well.

My high school offered an electronics class, that six of the nerdiest kids (myself among them) **came in early** to take. I had to have my father drive me in for it because the buses wouldn't arrive in time. The class was where I first used a bread board to make basic circuits and I loved it. Each quarter we had to solder together an electronics kit. It started with a simple clapper, but by the end an arms race had ensued between us and I built a [walking robot kit](http://www.hobbyengineering.com/H2236.html) that could turn when it bumped into walls. Amazing. 

When it was time for college, I pursued a degree in Computer engineering because computers were the most complicated thing I could think of, and I wanted to know how they worked. But as I moved through college, an even more complicated thing was happening: the Internet. I split my time between embedded systems and system-level programming classes (networking, operating systems, etc...). And I really fell in love with the discovery of it all.

## Traveling the same roads
I got a dream job working with people far more talented than myself. I think everyone should do this. For many years, I was perfectly happy writing software and discovering how things work in a distributed environment, but with time things began to change. I started to feel that I was retreading the same ground. I was no longer discovering new things at the rate I had in the past. I had finally, after a little over a decade, managed to figure out how computing worked. 

Don't read too much into that, I don't know *everything*, or even *most things*, but I did reach a point inside myself where I knew *enough*. I finally managed to unwind the vice till the jaw fell apart, and in doing so I had discovered something about myself: I make things as a form of discovery. I'm still the same kid I was growing up, wondering how things work. Only now I'm busy making things to gain that same understanding. I reached a point where the things I was taking apart were so complicated, that I couldn't make sense of what was inside. The only logical thing to do was to build one for myself. It's through this act of creation that I'm able to truly understand the nature of things.

So there I was, working as a programmer, having built an entire identity for myself around programming and suddenly I realized that it wasn't what fulfilled me, it was discovery. It was taking the next thing apart, discovering that it wasn't enough, and then building one of my own. It took a while longer for me to realize that writing software wasn't going to make me happy for the rest of my life, but it *was* going to enable me to discover more about myself, so all in all not a bad outcome. 

## Finding the next thing to explore
As I slowly came to the realization that programming wasn't an end unto itself for me, I just naturally began to find new things to explore. Outside of my own role making software, I hadn't really considered what it takes to "make" a good team. I started reading a hand full of books on the topic, which is about as close as you can get to "taking apart a team" without getting fired for your efforts. Understanding how a computer works turns out to be a lot more strait forward than understanding how people work. There are manuals, there are text books, there is a structure and a rigor, and a correctness that is completely lost when dealing with people. It excited me, because it felt like I got to the top of one mountain and discovered a vast valley below, completely unexplored and full of things to take apart. But how to get there?

At some point I formed an opinion of my existing team, which was that we were too small for the amount of software we were expected to own and maintain. It was lucky for me that my boss at the time saw it to, and so I helped him gather some data to justify growing the team. Steve Blank has a great post on [showing up](http://steveblank.com/2011/05/17/philadelphia-university-commencement-speech-%E2%80%93-may-15th-2011/) and in this case that's what happened: I showed up, I helped out, and then my boss asked if I wanted a new job managing the team. 

## Suddenly I had the opportunity to explore building a team, which seemed pretty interesting to me, so I went for it.
Here is a lie every new dev manager tells themselves: I'll still make time to code. So much of what a manager does goes unseen by his team, so it's a natural thing to tell yourself. The reality of being a manager is different: You're time suddenly doesn't belong to you, it belongs to others. Your job is no longer to be an individual contributor, but to rise all boats in the harbor. It's an explosion of unknowns and poorly understood options that I never had to fully consider as a developer. If you've got a million billion options to choose from, and you only have time each day to work on 5, it's extremely unlikely that you will choose programming, which at a minimum takes up 2 slots to do well. Suddenly that's not the most important thing you could be doing, it's difficult to accept at first.

But I'm happy with my decision to move on, not because I was tired of programming but because I had figured it out to my own satisfaction. Now programming isn't the thing I'm trying to take apart and rebuild, it's management. Programming has become a tool I can use to take other things apart. I still occasionally write some code, but it's no longer about the software, it's about the answer or the insight it's going to give me. Coding is a really nice sledgehammer, and if your taking things apart that's a great tool to have handy. But that's what it's become to me, a tool for getting answers. As a manager turned developer, you need to make peace with that. 

I don't expect every developer to understand that, but somewhere out there, you might have been that same kid who took apart his grandfather's vise just to see how it worked. You might feel like you're turning your back on your identity by leaving programming behind. I want to tell you that you're not the only one who felt that way, and it's OK. The world doesn't need more managers, but it could stand to have a few more curious explorers leading great teams. Don't be afraid to figure out how the next cannonball works. Go break it open.
